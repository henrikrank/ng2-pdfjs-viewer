{"version":3,"file":"index.js","sources":["c:/Users/skywa/Documents/Montonio/slice-angular/node_modules/ng2-pdfjs-viewer/dist/index.js"],"sourcesContent":["import { Component, ViewChild, Input, Output, EventEmitter, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: ng2-pdfjs-viewer.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar PdfJsViewerComponent = /** @class */ (function () {\r\n    function PdfJsViewerComponent() {\r\n        this.onBeforePrint = new EventEmitter();\r\n        this.onAfterPrint = new EventEmitter();\r\n        this.onDocumentLoad = new EventEmitter();\r\n        this.onPageChange = new EventEmitter();\r\n        this.externalWindow = false;\r\n        this.showSpinner = true;\r\n        this.openFile = true;\r\n        this.download = true;\r\n        this.viewBookmark = true;\r\n        this.print = true;\r\n        this.fullScreen = true;\r\n        //@Input() public showFullScreen: boolean;\r\n        this.find = true;\r\n        this.useOnlyCssZoom = false;\r\n        this.errorOverride = false;\r\n        this.errorAppend = true;\r\n        this.diagnosticLogs = true;\r\n    }\r\n    Object.defineProperty(PdfJsViewerComponent.prototype, \"page\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (this.PDFViewerApplication) {\r\n                return this.PDFViewerApplication.page;\r\n            }\r\n            else {\r\n                if (this.diagnosticLogs)\r\n                    console.warn(\"Document is not loaded yet!!!. Try to retrieve page# after full load.\");\r\n            }\r\n        },\r\n        set: /**\r\n         * @param {?} _page\r\n         * @return {?}\r\n         */\r\n        function (_page) {\r\n            this._page = _page;\r\n            if (this.PDFViewerApplication) {\r\n                this.PDFViewerApplication.page = this._page;\r\n            }\r\n            else {\r\n                if (this.diagnosticLogs)\r\n                    console.warn(\"Document is not loaded yet!!!. Try to set page# after full load. Ignore this warning if you are not setting page# using '.' notation. (E.g. pdfViewer.page = 5;)\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfJsViewerComponent.prototype, \"pdfSrc\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._src;\r\n        },\r\n        set: /**\r\n         * @param {?} _src\r\n         * @return {?}\r\n         */\r\n        function (_src) {\r\n            this._src = _src;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfJsViewerComponent.prototype, \"PDFViewerApplicationOptions\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            /** @type {?} */\r\n            var pdfViewerOptions = null;\r\n            if (this.externalWindow) {\r\n                if (this.viewerTab) {\r\n                    pdfViewerOptions = this.viewerTab.PDFViewerApplicationOptions;\r\n                }\r\n            }\r\n            else {\r\n                if (this.iframe.nativeElement.contentWindow) {\r\n                    pdfViewerOptions = this.iframe.nativeElement.contentWindow.PDFViewerApplicationOptions;\r\n                }\r\n            }\r\n            return pdfViewerOptions;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfJsViewerComponent.prototype, \"PDFViewerApplication\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            /** @type {?} */\r\n            var pdfViewer = null;\r\n            if (this.externalWindow) {\r\n                if (this.viewerTab) {\r\n                    pdfViewer = this.viewerTab.PDFViewerApplication;\r\n                }\r\n            }\r\n            else {\r\n                if (this.iframe.nativeElement.contentWindow) {\r\n                    pdfViewer = this.iframe.nativeElement.contentWindow.PDFViewerApplication;\r\n                }\r\n            }\r\n            return pdfViewer;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @param {?} viewerEvent\r\n     * @return {?}\r\n     */\r\n    PdfJsViewerComponent.prototype.receiveMessage = /**\r\n     * @param {?} viewerEvent\r\n     * @return {?}\r\n     */\r\n    function (viewerEvent) {\r\n        if (viewerEvent.data && viewerEvent.data.viewerId && viewerEvent.data.event) {\r\n            /** @type {?} */\r\n            var viewerId = viewerEvent.data.viewerId;\r\n            /** @type {?} */\r\n            var event_1 = viewerEvent.data.event;\r\n            /** @type {?} */\r\n            var param = viewerEvent.data.param;\r\n            if (this.viewerId == viewerId) {\r\n                if (this.onBeforePrint && event_1 == \"beforePrint\") {\r\n                    this.onBeforePrint.emit();\r\n                }\r\n                else if (this.onAfterPrint && event_1 == \"afterPrint\") {\r\n                    this.onAfterPrint.emit();\r\n                }\r\n                else if (this.onDocumentLoad && event_1 == \"pagesLoaded\") {\r\n                    this.onDocumentLoad.emit(param);\r\n                }\r\n                else if (this.onPageChange && event_1 == \"pageChange\") {\r\n                    this.onPageChange.emit(param);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    PdfJsViewerComponent.prototype.ngOnInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        window.addEventListener(\"message\", this.receiveMessage.bind(this), false);\r\n        if (!this.externalWindow) { // Load pdf for embedded views\r\n            this.loadPdf();\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    PdfJsViewerComponent.prototype.refresh = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.loadPdf();\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    PdfJsViewerComponent.prototype.loadPdf = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (!this._src) {\r\n            return;\r\n        }\r\n        // console.log(`Tab is - ${this.viewerTab}`);\r\n        // if (this.viewerTab) {\r\n        //   console.log(`Status of window - ${this.viewerTab.closed}`);\r\n        // }\r\n        if (this.externalWindow && (typeof this.viewerTab === 'undefined' || this.viewerTab.closed)) {\r\n            this.viewerTab = window.open('', '_blank', this.externalWindowOptions || '');\r\n            if (this.viewerTab == null) {\r\n                if (this.diagnosticLogs)\r\n                    console.error(\"ng2-pdfjs-viewer: For 'externalWindow = true'. i.e opening in new tab to work, pop-ups should be enabled.\");\r\n                return;\r\n            }\r\n            if (this.showSpinner) {\r\n                this.viewerTab.document.write(\"\\n          <style>\\n          .loader {\\n            position: fixed;\\n            left: 40%;\\n            top: 40%;\\n            border: 16px solid #f3f3f3;\\n            border-radius: 50%;\\n            border-top: 16px solid #3498db;\\n            width: 120px;\\n            height: 120px;\\n            animation: spin 2s linear infinite;\\n          }\\n          @keyframes spin {\\n            0% {\\n              transform: rotate(0deg);\\n            }\\n            100% {\\n              transform: rotate(360deg);\\n            }\\n          }\\n          </style>\\n          <div class=\\\"loader\\\"></div>\\n        \");\r\n            }\r\n        }\r\n        /** @type {?} */\r\n        var fileUrl;\r\n        //if (typeof this.src === \"string\") {\r\n        //  fileUrl = this.src;\r\n        //}\r\n        if (this._src instanceof Blob) {\r\n            fileUrl = encodeURIComponent(URL.createObjectURL(this._src));\r\n        }\r\n        else if (this._src instanceof Uint8Array) {\r\n            /** @type {?} */\r\n            var blob = new Blob([this._src], { type: \"application/pdf\" });\r\n            fileUrl = encodeURIComponent(URL.createObjectURL(blob));\r\n        }\r\n        else {\r\n            fileUrl = this._src;\r\n        }\r\n        /** @type {?} */\r\n        var viewerUrl;\r\n        if (this.viewerFolder) {\r\n            viewerUrl = this.viewerFolder + \"/web/viewer.html\";\r\n        }\r\n        else {\r\n            viewerUrl = \"assets/pdfjs/web/viewer.html\";\r\n        }\r\n        viewerUrl += \"?file=\" + fileUrl;\r\n        if (typeof this.viewerId !== 'undefined') {\r\n            viewerUrl += \"&viewerId=\" + this.viewerId;\r\n        }\r\n        if (typeof this.onBeforePrint !== 'undefined') {\r\n            viewerUrl += \"&beforePrint=true\";\r\n        }\r\n        if (typeof this.onAfterPrint !== 'undefined') {\r\n            viewerUrl += \"&afterPrint=true\";\r\n        }\r\n        if (typeof this.onDocumentLoad !== 'undefined') {\r\n            viewerUrl += \"&pagesLoaded=true\";\r\n        }\r\n        if (typeof this.onPageChange !== 'undefined') {\r\n            viewerUrl += \"&pageChange=true\";\r\n        }\r\n        if (this.downloadFileName) {\r\n            if (!this.downloadFileName.endsWith(\".pdf\")) {\r\n                this.downloadFileName += \".pdf\";\r\n            }\r\n            viewerUrl += \"&fileName=\" + this.downloadFileName;\r\n        }\r\n        if (typeof this.openFile !== 'undefined') {\r\n            viewerUrl += \"&openFile=\" + this.openFile;\r\n        }\r\n        if (typeof this.download !== 'undefined') {\r\n            viewerUrl += \"&download=\" + this.download;\r\n        }\r\n        if (this.startDownload) {\r\n            viewerUrl += \"&startDownload=\" + this.startDownload;\r\n        }\r\n        if (typeof this.viewBookmark !== 'undefined') {\r\n            viewerUrl += \"&viewBookmark=\" + this.viewBookmark;\r\n        }\r\n        if (typeof this.print !== 'undefined') {\r\n            viewerUrl += \"&print=\" + this.print;\r\n        }\r\n        if (this.startPrint) {\r\n            viewerUrl += \"&startPrint=\" + this.startPrint;\r\n        }\r\n        if (typeof this.fullScreen !== 'undefined') {\r\n            viewerUrl += \"&fullScreen=\" + this.fullScreen;\r\n        }\r\n        // if (this.showFullScreen) {\r\n        //   viewerUrl += `&showFullScreen=${this.showFullScreen}`;\r\n        // }\r\n        if (typeof this.find !== 'undefined') {\r\n            viewerUrl += \"&find=\" + this.find;\r\n        }\r\n        if (this.lastPage) {\r\n            viewerUrl += \"&lastpage=\" + this.lastPage;\r\n        }\r\n        if (this.rotatecw) {\r\n            viewerUrl += \"&rotatecw=\" + this.rotatecw;\r\n        }\r\n        if (this.rotateccw) {\r\n            viewerUrl += \"&rotateccw=\" + this.rotateccw;\r\n        }\r\n        if (this.cursor) {\r\n            viewerUrl += \"&cursor=\" + this.cursor;\r\n        }\r\n        if (this.scroll) {\r\n            viewerUrl += \"&scroll=\" + this.scroll;\r\n        }\r\n        if (this.spread) {\r\n            viewerUrl += \"&spread=\" + this.spread;\r\n        }\r\n        if (this.locale) {\r\n            viewerUrl += \"&locale=\" + this.locale;\r\n        }\r\n        if (this.useOnlyCssZoom) {\r\n            viewerUrl += \"&useOnlyCssZoom=\" + this.useOnlyCssZoom;\r\n        }\r\n        if (this._page || this.zoom || this.nameddest || this.pagemode)\r\n            viewerUrl += \"#\";\r\n        if (this._page) {\r\n            viewerUrl += \"&page=\" + this._page;\r\n        }\r\n        if (this.zoom) {\r\n            viewerUrl += \"&zoom=\" + this.zoom;\r\n        }\r\n        if (this.nameddest) {\r\n            viewerUrl += \"&nameddest=\" + this.nameddest;\r\n        }\r\n        if (this.pagemode) {\r\n            viewerUrl += \"&pagemode=\" + this.pagemode;\r\n        }\r\n        if (this.errorOverride || this.errorAppend) {\r\n            viewerUrl += \"&errorMessage=\" + this.errorMessage;\r\n            if (this.errorOverride) {\r\n                viewerUrl += \"&errorOverride=\" + this.errorOverride;\r\n            }\r\n            if (this.errorAppend) {\r\n                viewerUrl += \"&errorAppend=\" + this.errorAppend;\r\n            }\r\n        }\r\n        if (this.externalWindow) {\r\n            this.viewerTab.location.href = viewerUrl;\r\n        }\r\n        else {\r\n            this.iframe.nativeElement.src = viewerUrl;\r\n        }\r\n        // console.log(`\r\n        //   pdfSrc = ${this.pdfSrc}\r\n        //   fileUrl = ${fileUrl}\r\n        //   externalWindow = ${this.externalWindow}\r\n        //   downloadFileName = ${this.downloadFileName}\r\n        //   viewerFolder = ${this.viewerFolder}\r\n        //   openFile = ${this.openFile}\r\n        //   download = ${this.download}\r\n        //   startDownload = ${this.startDownload}\r\n        //   viewBookmark = ${this.viewBookmark}\r\n        //   print = ${this.print}\r\n        //   startPrint = ${this.startPrint}\r\n        //   fullScreen = ${this.fullScreen}\r\n        //   find = ${this.find}\r\n        //   lastPage = ${this.lastPage}\r\n        //   rotatecw = ${this.rotatecw}\r\n        //   rotateccw = ${this.rotateccw}\r\n        //   cursor = ${this.cursor}\r\n        //   scrollMode = ${this.scroll}\r\n        //   spread = ${this.spread}\r\n        //   page = ${this.page}\r\n        //   zoom = ${this.zoom}\r\n        //   nameddest = ${this.nameddest}\r\n        //   pagemode = ${this.pagemode}\r\n        //   pagemode = ${this.errorOverride}\r\n        //   pagemode = ${this.errorAppend}\r\n        //   pagemode = ${this.errorMessage}\r\n        // `);\r\n    };\r\n    PdfJsViewerComponent.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'ng2-pdfjs-viewer',\r\n                    template: \"<iframe title=\\\"ng2-pdfjs-viewer\\\" [hidden]=\\\"externalWindow || (!externalWindow && !pdfSrc)\\\" #iframe width=\\\"100%\\\" height=\\\"100%\\\"></iframe>\"\r\n                },] }\r\n    ];\r\n    PdfJsViewerComponent.propDecorators = {\r\n        iframe: [{ type: ViewChild, args: ['iframe', { static: true },] }],\r\n        viewerId: [{ type: Input }],\r\n        onBeforePrint: [{ type: Output }],\r\n        onAfterPrint: [{ type: Output }],\r\n        onDocumentLoad: [{ type: Output }],\r\n        onPageChange: [{ type: Output }],\r\n        viewerFolder: [{ type: Input }],\r\n        externalWindow: [{ type: Input }],\r\n        showSpinner: [{ type: Input }],\r\n        downloadFileName: [{ type: Input }],\r\n        openFile: [{ type: Input }],\r\n        download: [{ type: Input }],\r\n        startDownload: [{ type: Input }],\r\n        viewBookmark: [{ type: Input }],\r\n        print: [{ type: Input }],\r\n        startPrint: [{ type: Input }],\r\n        fullScreen: [{ type: Input }],\r\n        find: [{ type: Input }],\r\n        zoom: [{ type: Input }],\r\n        nameddest: [{ type: Input }],\r\n        pagemode: [{ type: Input }],\r\n        lastPage: [{ type: Input }],\r\n        rotatecw: [{ type: Input }],\r\n        rotateccw: [{ type: Input }],\r\n        cursor: [{ type: Input }],\r\n        scroll: [{ type: Input }],\r\n        spread: [{ type: Input }],\r\n        locale: [{ type: Input }],\r\n        useOnlyCssZoom: [{ type: Input }],\r\n        errorOverride: [{ type: Input }],\r\n        errorAppend: [{ type: Input }],\r\n        errorMessage: [{ type: Input }],\r\n        diagnosticLogs: [{ type: Input }],\r\n        externalWindowOptions: [{ type: Input }],\r\n        page: [{ type: Input }],\r\n        pdfSrc: [{ type: Input }]\r\n    };\r\n    return PdfJsViewerComponent;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: index.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar PdfJsViewerModule = /** @class */ (function () {\r\n    function PdfJsViewerModule() {\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    PdfJsViewerModule.forRoot = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return {\r\n            ngModule: PdfJsViewerModule\r\n        };\r\n    };\r\n    PdfJsViewerModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    imports: [\r\n                        CommonModule\r\n                    ],\r\n                    declarations: [\r\n                        PdfJsViewerComponent\r\n                    ],\r\n                    exports: [\r\n                        PdfJsViewerComponent\r\n                    ]\r\n                },] }\r\n    ];\r\n    return PdfJsViewerModule;\r\n}());\r\n\r\nexport { PdfJsViewerModule, PdfJsViewerComponent };\r\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAyVM,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAsCA;;;;;;;;;;;;;;;;;;;;;;MAsBA;;;;;;;;;;;;;;;;;;;cAaA;;;;;"}